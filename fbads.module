<?php

	// include Facebook and Facebook Ads library
	$fb_path = function_exists('libraries_get_path') ? libraries_get_path('facebook-php-sdk') : '/var/www/vhosts/boucado.space/httpdocs/sites/all/libraries/facebook-php-sdk';
	$fb_ads_path = function_exists('libraries_get_path') ? libraries_get_path('facebook-php-ads-sdk') : '/var/www/vhosts/boucado.space/httpdocs/sites/all/libraries/facebook-php-ads-sdk';

	require_once $fb_path . '/vendor/autoload.php';  
	require_once $fb_ads_path . '/vendor/autoload.php';

	// Add to header of your file
	use Facebook\Facebook;
	use Facebook\Exceptions\FacebookResponseException;
	use Facebook\Exceptions\FacebookSDKException;
	
	use FacebookAds\Api;
	
	// Accounts
	use FacebookAds\Object\AdUser;
	use FacebookAds\Object\Fields\AdUserFields;
	use FacebookAds\Object\AdAccount;
	use FacebookAds\Object\Fields\AdAccountFields;	

	// Campaigns
	use FacebookAds\Object\Campaign;
	use FacebookAds\Object\Fields\CampaignFields;
	use FacebookAds\Object\Values\AdObjectives;
	use FacebookAds\Object\Values\AdBuyingTypes;

	// Targeting
	use FacebookAds\Object\TargetingSearch;
	use FacebookAds\Object\Search\TargetingSearchTypes;
	use FacebookAds\Object\Fields\TargetingSpecsFields;
	use FacebookAds\Object\TargetingSpecs;


	$path = drupal_get_path('module', 'fbads');
	drupal_add_css($path . "fbads.css");
	
	require_once('fbads_TargetingSearch.inc');
	

function fbads_print_pre($p,$titel="") {
	if ($titel<>"") {print $titel . ": ";} 
	print "<pre>";
	print_r($p);
	print "</pre>";
}

function fbads_init() {
    drupal_add_css(drupal_get_path('module', 'fbads') . '/fbads.css');

	if (isset($_SESSION['facebook_access_token'])) {
		
		// Initialize a new Session and instantiate an Api object
		Api::init(
		  variable_get('fbads_app_id'), // App ID
		  variable_get('fbads_app_secret'),
		  $_SESSION['facebook_access_token'] // Your user access token
		  //variable_get('fbads_access_token')
		);
	}

}

function fbads_permission() {
  return array(
    'access fbads' => array(
      'title' => t('Access Facebook Ads'),
    ),
  );
}

function fbads_menu() {
    $items = array();
	
	    $items['admin/config/services/fbads'] = array(
        'title' => t('Facebook Ads'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fbads_admin_config_form'),  
        'access arguments' => array('administer site configuration'),
        'type' => MENU_CALLBACK,
    );
	
	$items['fbads/login'] = array(
        'title' => t('Facebook Login'),
        'access arguments' => array('access fbads'),
        'page arguments' => array(0),  
        'page callback' => 'fbads_login',
    );
	
    $items['fbads/tests'] = array(
        'title' => t('Tests'),
        'access arguments' => array('administer site configuration'),
        'page arguments' => array(0),  
        'page callback' => 'fbads_tests',
    );
	
	$items['fbads/target'] = array(
        'title' => t('Facebook Targeting'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fbads_target_form'),  
        'access arguments' => array('access fbads'),
    );
	
    $items['fbads/interestresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_interestresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/suggestionresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_interestsuggestionresults',
        'type' => MENU_CALLBACK
    );	

    $items['fbads/countryresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_countryresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/regionsresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_regionsresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/cityresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_cityresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/zipresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_zipresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/localesresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_localesresults',
        'type' => MENU_CALLBACK
    );
		
    $items['fbads/educationresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_educationresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/majorresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_majorresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/employerresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_employerresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/positionresults'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_positionresults',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/category/%'] = array(
        'access arguments' => array('access fbads'),
        'page arguments' => array(2),
        'page callback' => '_fbads_categorylist',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/interest/%'] = array(
        'access arguments' => array('access fbads'),
        'page arguments' => array(2),
        'page callback' => '_fbads_interestlist',
        'type' => MENU_CALLBACK
    );
	
    $items['fbads/addcountry'] = array(
        'access arguments' => array('access fbads'),
        'page callback' => '_fbads_addcountry',
        'type' => MENU_CALLBACK
    );	
	return $items;
}

function fbads_login() {
	
	// fbads_print_pre($_SESSION);

	$fb = new Facebook(['app_id' => variable_get('fbads_app_id'), 'app_secret' => variable_get('fbads_app_secret'),]);
	
	$helper = $fb->getRedirectLoginHelper();
	$output = "";
		
	if (!isset($_SESSION['facebook_access_token'])) {
	  $_SESSION['facebook_access_token'] = null;
	}
	
	if (!$_SESSION['facebook_access_token']) {
	  $helper = $fb->getRedirectLoginHelper();
	  try {
	    $_SESSION['facebook_access_token'] = (string) $helper->getAccessToken();
	  } catch(FacebookResponseException $e) {
	    // When Graph returns an error
	    drupal_set_message('Graph returned an error: ' . $e->getMessage(), 'error');
		$output .= "Graph Error!";
	    return $output;
	  } catch(FacebookSDKException $e) {
	    // When validation fails or other local issues
	    drupal_set_message( 'Facebook SDK returned an error: ' . $e->getMessage(), 'error');
		$output .= "Login Error!";
	    return $output;
	  }
	}
	
	if ($_SESSION['facebook_access_token']) {
		drupal_set_message(t('You are logged in.'));
		$output .= "Login Ok";
	} else {
		$permissions = ['ads_management'];
		$loginUrl = $helper->getLoginUrl('http://www.boucado.space/fbads/login', $permissions);
		$output.='<a href="' . $loginUrl . '">Log in with Facebook</a>';
	} 
	
	return $output;
}

function fbads_admin_config_form($form,&$form_state){
			
		$form['app_id'] = array(
		'#type' => 'textfield',
		'#title' => t('App ID'),
		'#default_value' => variable_get('fbads_app_id'),
		'#required' => TRUE
		);
		
		$form['app_secret'] = array(
		'#type' => 'textfield',
		'#title' => t('App Secret'),
		'#default_value' => variable_get('fbads_app_secret'),
		'#required' => TRUE
		);

		$form['ad_account'] = array(
		'#type' => 'textfield',
		'#title' => t('Ad Account'),
		'#default_value' => variable_get('fbads_ad_account'),		
		'#required' => TRUE
		);
		
		$form['access_token'] = array(
		'#type' => 'textarea',
		'#title' => t('Access Token'),
		'#default_value' => variable_get('fbads_access_token'),		
		'#required' => TRUE
		);
	
		
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);		
	
	return $form;
}

function fbads_admin_config_form_submit(&$form_state) {
	variable_set('fbads_app_id', $form_state['app_id']['#value']);
	variable_set('fbads_app_secret', $form_state['app_secret']['#value']);	
	variable_set('fbads_access_token', $form_state['access_token']['#value']);
	variable_set('fbads_ad_account', $form_state['ad_account']['#value']);
	
	drupal_set_message(t('Your configuration has been saved.'));
}

function fbads_getAdAccount(){
		
	$user = new AdUser('me');
	$user->read(array(AdUserFields::ID));
	
	$accounts = $user->getAdAccounts(array(
	  AdAccountFields::ID,
	  AdAccountFields::NAME,
	));
	
	// Print out the accounts
	$output =  "Accounts:<br>";
	$i = 0;
	$j = 0;
	foreach($accounts as $account) {
		$output .= $account->id . ' - ' .$account->name."<br>";
		if (strpos($account->id,variable_get('fbads_ad_account')) > 0) {
			$j = $i;
		}
		$i++;
	}

	// Grab the first account for next steps (you should probably choose one)
	$account = (count($accounts)) ? $accounts->getObjects()[$j] : null;
	$output .= "<br>Using this account: ";
	$output .= $account->id."<br>";

	return $account;
}

function fbads_newCampaign($account){
	$campaign  = new Campaign(null, $account->id);
	$campaign->setData(array(
	  CampaignFields::NAME => 'My First Campaign',
	  CampaignFields::OBJECTIVE => AdObjectives::LINK_CLICKS,
	));
	
	$campaign->create(array(
	  Campaign::STATUS_PARAM_NAME => Campaign::STATUS_PAUSED,
	));
	return $campaign;
}

function fbads_tests(){
	$account = fbads_getAdAccount();
	$campaign = fbads_newCampaign($account);
	
	$output = "<br>Campaign ID: ".$campaign->id."<br>";
	
	return $output;
}

function fbads_target_form($form,&$form_state){
	
	if(!empty($form_state['storage'])) $values = $form_state['storage'];
	
	$path = drupal_get_path('module', 'fbads');
	
	$form['#tree'] = TRUE;
	$form['jquery.ui'] = array(
		'#type' => 'hidden',
		// Both the library and custom JavaScript code are added to the '#attached'
	    // property of a renderable array.
	    '#attached' => array(
	      'library' => array(
	        array('system', 'ui.autocomplete'),
	      ),
	      'js' => array(
	        "$path/fbads.js",
	      ),
	    ),
	);

  $form['location_set'] = array(
  	'#title' => t('Location'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => FALSE,	
  );
  
  $form['location_set']['countries_checkboxes_fieldset'] = array(
    '#title' => t("Selected countries"),
    '#prefix' => '<div id="countries-checkboxes-wrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
  );

  if (isset($form_state['storage']['field_country_code'])) {
  		$countries = $form_state['storage']['field_country_code'];
  } else {
  		$countries = "";
  }
  
  $form['location_set']['field_country_code'] = array(
  	'#type' => 'textfield',
  	'#attributes' => array('id' => 'field_country_code'),
  	'#value' => $countries,
    '#prefix' => '<div id="field-country-code-wrapper">',
    '#suffix' => '</div>',    	
  );
  
  
  $options = "";
  if (isset($form_state['input']['location_set']['location'])) {
	$options = $form_state['input']['location_set']['field_country_code'];
  } elseif (isset($form_state['storage']['field_country_code'])) {
  	$options = $form_state['storage']['field_country_code'];
  }
  
  $form['location_set']['countries_checkboxes_fieldset']['cbx_countries'] = array(
    '#type' => 'checkboxes',
    '#options' => json_decode($options,TRUE),
    '#ajax' => array(
		'callback' => '_fbads_ajax_deletecountry',
		'wrapper' => 'field-country-code-wrapper',
		'parameters'=>array('param1'=>'delete'),
	),
  );
  
  $form['location_set']['location'] = array(
	    '#type' => 'textfield',
	    '#title' => 'Your Location (Country)',
	    '#id' => 'country_autocomplete',
	    '#attributes' => array('class' => array('ui-autocomplete-input')),
	    '#ajax' => array(
			'callback' => '_fbads_ajax_country',
			'wrapper' => 'countries-checkboxes-wrapper',
			'parameters'=>array('param1'=>'param1_vale','param2'=>'param2_vale','param3'=>'param3_vale'),
		),
  ); 
    
  
  $form['location_set']['countries'] = array(
    '#type' => 'textfield',
    '#title' => t('Country'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/countryresults',
  );	
  
/*  
  $form['location_set']['regions'] = array(
    '#type' => 'textfield',
    '#title' => t('Region'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/regionsresults',
  );	
  
  $form['location_set']['cities'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/cityresults',
  );
  
  $form['location_set']['zips'] = array(
    '#type' => 'textfield',
    '#title' => t('ZIP'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/zipresults',
  );
  
    $form['location_set']['address_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#maxlength' => 128,
  );
  
    $form['location_set']['radius'] = array(
    '#type' => 'textfield',
    '#title' => t('Radius in km'),
    '#description' => t('Must be between 1 and 80km'),
    '#maxlength' => 128,
  );
  
  $form['location_set']['location_types'] = array(
  	'#title' => t('Location type'),
  	'#type' => 'select',
  	'#multiple' => TRUE,
  	'#options' => array('recent' => t('recent'), 'home' => t('home'), 'travel_in' => t('travel in')),
  	'#option_attributes' => array('recent' => array('title' => 'People whose most recent location is the selected area, as determined by information from their mobile device.'), 
  									'home' => array('title' => 'People whose stated location from their Facebook profile “current city” is within that location. This is also validated by IP address and aggregated information from their friends’ stated profile locations.'), 
  									'travel_in' => array('title' => 'People whose most recent location is the selected area, as determined by information from their mobile device, and are more than 100 miles away from their stated current city from their Facebook profiles.')),
  );
  
  
  $form['locales_set'] = array(
  	'#title' => t('Locales'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
    
  $form['locales_set']['locales'] = array(
    '#type' => 'textfield',
    '#title' => t('Locales'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/localesresults',
  );
  
  $form['gender_age_set'] = array(
  	'#title' => t('Gender & Age'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
  
  $form['gender_age_set']['genders'] = array(
  	'#title' => t('Gender'),
  	'#type' => 'radios',
  	'#options' => array('0' => t('All'), '1' => t('male'), '2' => t('female')),
  );
  
  $form['gender_age_set']['age_min'] = array(
  	'#title' => t('min. Age'),
  	'#type' => 'textfield',
  	'#description' => t('13 - 65'),
  );

  $form['gender_age_set']['age_max'] = array(
  	'#title' => t('max. Age'),
  	'#type' => 'textfield',
  	'#description' => t('13 - 65'),
  );
  

  $form['interest_set'] = array(
  	'#title' => t('Interests'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
  
  $form['interest_set']['interests_list'] = array(
  	'#type' => 'checkboxes',
  	'#options' => null,
  	'#id' => 'interests_list'
  );
  
  $form['interest_set']['interests'] = array(
    '#type' => 'textfield',
    '#title' => t('Interests'),
    '#maxlength' => 128,
    '#id' => 'interests_autocomplete',
    '#autocomplete_path' => 'fbads/interestresults',
    '#attributes' => array('class' => array('ui-autocomplete-input')),
  );
  
	$form['interest_set']['test_interests'] = array(
		'#type' => 'submit',
		'#value' => 'Test interests',		
	);
	  
  $form['interest_set']['suggestion'] = array(
    '#type' => 'textfield',
    '#title' => t('Interest suggestion'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/suggestionresults',
  );
  
  $hierarchy = _fbads_interestlist('interests');

  $form['interest_set']['interestcats'] = array(
    '#type' => 'hierarchical_select',
    '#title' => t('Interest categories'),
    '#size' => 1,
    '#config' => array(
      'module' => 'hs_smallhierarchy',
      'params' => array(
        'hierarchy' => $hierarchy,
        'id' => 'my-hierarchy-about-interests',
        'separator' => '|',
      ),
      'save_lineage'    => 0,
      'enforce_deepest' => 0,
      'entity_count'    => 0,
      'require_entity'    => 0,
      'resizable'       => 1,
      'level_labels' => array(
        'status' => 0,
        'labels' => array(
          0 => t('Main category'),
          1 => t('Subcategory'),
          2 => t('Third level category'),
        ),
      ),
      'dropbox' => array(
        'status'   => 0,
        'title'    => t('All selections'),
        'limit'    => 0,
        'reset_hs' => 1,
      ),
      'editability' => array(
        'status'           => 0,
        'item_types'       => array(),
        'allowed_levels'   => array(
          0 => 0,
          1 => 0,
          2 => 1,
        ),
        'allow_new_levels' => 0,
        'max_levels'       => 3,
      ),
      // These settings cannot be configured through the UI: they can only be
      // overridden through code.
      'animation_delay'    => 100,
      'exclusive_lineages' => array(),
      'render_flat_select' => 0,
    ),
    //'#description' => 'Put your description here',
    //'#default_value' => 'win|vista|x86',
  );  
  
  $form['behaviors_set'] = array(
  	'#title' => t('Behaviors'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
  
    
  $hierarchy = _fbads_interestlist('behaviors');

  $form['behaviors_set']['behaviors'] = array(
    '#type' => 'hierarchical_select',
    '#title' => t('Behaviors'),
    '#size' => 1,
    '#config' => array(
      'module' => 'hs_smallhierarchy',
      'params' => array(
        'hierarchy' => $hierarchy,
        'id' => 'my-hierarchy-about-behaviors',
        'separator' => '|',
      ),
      'save_lineage'    => 0,
      'enforce_deepest' => 0,
      'entity_count'    => 0,
      'require_entity'    => 0,
      'resizable'       => 1,
      'level_labels' => array(
        'status' => 0,
        'labels' => array(
          0 => t('Main category'),
          1 => t('Subcategory'),
          2 => t('Third level category'),
        ),
      ),
      'dropbox' => array(
        'status'   => 0,
        'title'    => t('All selections'),
        'limit'    => 0,
        'reset_hs' => 1,
      ),
      'editability' => array(
        'status'           => 0,
        'item_types'       => array(),
        'allowed_levels'   => array(
          0 => 0,
          1 => 0,
          2 => 1,
        ),
        'allow_new_levels' => 0,
        'max_levels'       => 3,
      ),
      // These settings cannot be configured through the UI: they can only be
      // overridden through code.
      'animation_delay'    => 100,
      'exclusive_lineages' => array(),
      'render_flat_select' => 0,
    ),
    //'#description' => 'Put your description here',
    //'#default_value' => 'win|vista|x86',
  );
  
  
  $form['education_set'] = array(
  	'#title' => t('Education'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
  
  $form['education_set']['education_statuses'] = array(
  	'#title' => t('Education statuses'),
  	'#type' => 'checkboxes',
  	'#options' => array( 
		'1' => 'High school',
		'2' => 'In collete',
		'3' => 'College grad',
		'4' => 'High school grad',
		'5' => 'Some college',
		'6' => 'Associate degree',
		'7' => 'In grad school',
		'8' => 'Some grad school',
		'9' => 'Master degree',
		'10' => 'Professional degree',
		'11' => 'Doctorate degree',
		'12' => 'Unspecified',
		'13' => 'Some high school')
  );
  
  $form['education_set']['education_schools'] = array(
    '#type' => 'textfield',
    '#title' => t('Schools'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/educationresults',
  );
  
   $form['education_set']['education_majors'] = array(
    '#type' => 'textfield',
    '#title' => t('Education Majors'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/majorresults',
  );
  
  $form['work_set'] = array(
  	'#title' => t('Work'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
  
   $form['work_set']['work_employers'] = array(
    '#type' => 'textfield',
    '#title' => t('Employers'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/employerresults',
  );
  
  $form['work_set']['work_positions'] = array(
    '#type' => 'textfield',
    '#title' => t('Job Titles'),
    '#maxlength' => 128,
    '#autocomplete_path' => 'fbads/positionresults',
  );
  
  $form['relationship_set'] = array(
  	'#title' => t('Relationship'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
  
  
  $form['relationship_set']['relationship_statuses'] = array(
  	'#title' => t('Relationship'),
  	'#type' => 'checkboxes',
  	'#options' => array(
		'1' => 'single', '2' => 'in_relationship', '3' => 'married', '4' => 'engaged', '6' => 'not specified',
		'7' => 'in a civil union', '8' => 'in a domestic partnership', '9' => 'In an open relationship',
		'10' =>'Its complicated', '11' => 'Separated', '12' => 'Divorced', '13' => 'Widowed'
	)
  );
  
  $form['relationship_set']['interested_in'] = array(
  	'#title' => t('Interested in'),
  	'#type' => 'checkboxes',
  	'#options' => array('1' => 'men', '2' => 'women', '3' => 'men and women', '4' => 'not specified'),
  );
  
  $form['demographics_set'] = array(
  	'#title' => t('Demographics'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
  
  // life_events
  $categories = _fbads_categorylist('life_events');
  $options = array();
  $option_attributes = array();
  foreach ($categories as $row) {
  	$options[$row['id']] = $row['label'];
	$option_attributes[$row['id']] = array('title' => $row['description']);
  }
   
  $form['demographics_set']['life_events'] = array(
  	'#title' => t('Life events'),
  	'#type' => 'select',
  	'#multiple' => TRUE,
  	'#options' => $options,
  	'#option_attributes' => $option_attributes,
  );
  
  
  // industries
  $categories = _fbads_categorylist('industries');
  $options = array();
  $option_attributes = array();
  foreach ($categories as $row) {
  	$options[$row['id']] = $row['label'];
	$option_attributes[$row['id']] = array('title' => $row['description']);
  }
   
  $form['demographics_set']['industries'] = array(
  	'#title' => t('Industries'),
  	'#type' => 'select',
  	'#multiple' => TRUE,
  	'#options' => $options,
  	'#option_attributes' => $option_attributes,
  );
  
  // ethnic_affinity
  $categories = _fbads_categorylist('ethnic_affinity');
  $options = array();
  $option_attributes = array();
  foreach ($categories as $row) {
  	$options[$row['id']] = $row['label'];
	$option_attributes[$row['id']] = array('title' => $row['description']);
  }
   
  $form['demographics_set']['ethnic_affinity'] = array(
  	'#title' => t('Ethnic affinity'),
  	'#type' => 'select',
  	'#multiple' => TRUE,
  	'#options' => $options,
  	'#option_attributes' => $option_attributes,
  );
  
  // generation
  $categories = _fbads_categorylist('generation');
  $options = array();
  $option_attributes = array();
  foreach ($categories as $row) {
  	$options[$row['id']] = $row['label'];
	$option_attributes[$row['id']] = array('title' => $row['description']);
  }
   
  $form['demographics_set']['generation'] = array(
  	'#title' => t('Generation'),
  	'#type' => 'select',
  	'#multiple' => TRUE,
  	'#options' => $options,
  	'#option_attributes' => $option_attributes,
  );
  
  // family_statuses
  $categories = _fbads_categorylist('family_statuses');
  $options = array();
  $option_attributes = array();
  foreach ($categories as $row) {
  	$options[$row['id']] = $row['label'];
	$option_attributes[$row['id']] = array('title' => $row['description']);
  }
   
  $form['demographics_set']['family_statuses'] = array(
  	'#title' => t('Family status'),
  	'#type' => 'select',
  	'#multiple' => TRUE,
  	'#options' => $options,
  	'#option_attributes' => $option_attributes,
  );
  
  $form['device_set'] = array(
  	'#title' => t('Devices'),
  	'#type' => 'fieldset',
  	'#collapsible' => TRUE,
  	'#collapsed' => TRUE
  );
  
  
  $form['device_set']['user_os'] = array(
  	'#title' => t('User OS'),
  	'#type' => 'checkboxes',
  	'#options' => array('iOS' => 'iOS', 'Android' => 'Android')
  );
  
  // user_device
  $categories = _fbads_categorylist('user_device');
  $options = array();
  // fbads_print_pre($categories);
  
  foreach ($categories as $row) {
  	$options[$row['label']] = $row['description'] . " (" . $row['platform'] . ")";
  }
   
  $form['device_set']['user_device'] = array(
  	'#title' => t('User device'),
  	'#type' => 'select',
  	'#multiple' => TRUE,
  	'#options' => $options,
  );
  


  $form['page_types'] = array(
  	'#title' => t('Placement'),
  	'#type' => 'checkboxes',
  	'#options' => array('desktopfeed' => 'News Feed on Facebook Desktop',
						'mobilefeed' => 'News Feed on Facebook Mobile',
						'rightcolumn' => 'Right column on Facebook Desktop',
						'instagramstream' => 'The stream of media on Instagram mobile app',
						'mobileexternal' => 'Audience Network'
						),
  ); 
  
	if (isset($form_state['storage']['reach'])) {
		
	$form['reach'] = array(
		'#title' => t('Estimated reach:'),
		'#markup' => "<div id='estimated_reach'>" . $form_state['storage']['reach'] . "</div>",
	);
	
	}
*/
	$form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('Submit'),
	);
/*
	$form['reach_estimate'] = array(
	'#type' => 'submit',
	'#value' => t('Estimate reach'),
	);
	
	$form['options']['reset'] = array(
	  '#type' => 'submit',
	  '#value' => t('Reset'),
	  '#submit' => array('fbads_target_form_submit_reset'),
	);
*/
  return $form;
}

function fbads_target_form_submit_reset($form, &$form_state) {
  $form_state['rebuild'] = FALSE;
}

function fbads_target_form_validate($form, &$form_state){
	//fbads_print_pre($form_state['values']);

}

function fbads_target_form_submit($form, &$form_state){
	
	$form_state['rebuild'] = TRUE;
	$form_state['storage']['field_country_code'] = $form_state['input']['location_set']['field_country_code'];
	// fbads_print_pre($form_state['values']['location_set']);
	/*
	$interestlist = array_map('trim', explode(',', $form_state['values']['interests']));
	$interests = _fbads_interestvalidate($interestlist);	
	
	if($form_state['values']['op'] == 'Test interests'){
		$newinterests = "";
		foreach ($interests as $row) {
			$newinterests .= $row->name . ", ";
		}
		 //form_set_value($form['interest_set']['interests'], substr($newinterests,0,strlen($newinterests)-2), $form_state);
		 $form['interest_set']['interests']['#value']= $newinterests;
		 //$form_state['storage']['interests'] = $newinterests;
		 //fbads_print_pre($form_state);
	}

	$targeting = array();
	
	$targeting['geo_locations'] = array('countries' => array_map('trim', explode(',', $form_state['values']['countries'])));
	if (isset($form_state['values']['age_min'])) $targeting['age_min'] = $form_state['values']['age_min'];
	if (isset($form_state['values']['age_max'])) $targeting['age_max'] = $form_state['values']['age_max'];
	if (isset($form_state['values']['genders'])) $targeting['genders'] = array($form_state['values']['genders']);
	
	//fbads_print_pre(json_encode($targeting));

	if($form_state['values']['op'] == 'Estimate reach'){
		$reach = _fbads_reach_estimate($targeting);
		$form_state['storage']['reach'] = number_format($reach->data->users,0,',','.');
		// fbads_print_pre($reach->data->users);
	}
	
	/*
	$params = array('targeting_spec' => array($targeting));
	$descriptions = $account->getTargetingDescription(array(), $params)->{TargetingDescriptionFields::TARGETING_SENTENCE_LINES};
	fbads_print_pre($descriptions);
	 */
	
  
/*	
    [countries] => 
    [regions] => 
    [cities] => 
    [zips] => 
    [location_types] => Array
        (
        )

    [locales] => 
    [gender] => 
    [age_min] => 
    [age_max] => 
    [interest] => 
    [suggestion] => 
    [interestcats] => Array
        (
            [0] => 
        )

    [behaviors] => Array
        (
            [0] => 
        )

    [education_statuses] => Array
        (
            [1] => 0
            [2] => 0
            [3] => 0
            [4] => 0
            [5] => 0
            [6] => 0
            [7] => 0
            [8] => 0
            [9] => 0
            [10] => 0
            [11] => 0
            [12] => 0
            [13] => 0
        )

    [education_schools] => 
    [education_majors] => 
    [work_employers] => 
    [work_positions] => 
    [relationship_statuses] => Array
        (
            [1] => 0
            [2] => 0
            [3] => 0
            [4] => 0
            [6] => 0
            [7] => 0
            [8] => 0
            [9] => 0
            [10] => 0
            [11] => 0
            [12] => 0
            [13] => 0
        )

    [interested_in] => Array
        (
            [1] => 0
            [2] => 0
            [3] => 0
            [4] => 0
        )

    [life_events] => Array
        (
        )

    [industries] => Array
        (
        )

    [ethnic_affinity] => Array
        (
        )

    [generation] => Array
        (
        )

    [family_statuses] => Array
        (
        )

    [user_os] => Array
        (
            [iOS] => 0
            [Android] => 0
        )

    [user_device] => Array
        (
        )

    [page_types] => Array
        (
            [desktopfeed] => 0
            [mobilefeed] => 0
            [rightcolumn] => 0
            [instagramstream] => 0
            [mobileexternal] => 0
        )
	*/
}
	

function _fbads_addcountry(){
		
		$country = $_GET['country'];
		$code = $_GET['code'];
		drupal_json_output("Country " . $country . " " . $code . " added.");
}


function _fbads_ajax_country(&$form, &$form_state){
	return $form['location_set']['countries_checkboxes_fieldset'];
}

function _fbads_ajax_deletecountry(&$form, &$form_state){
	//fbads_print_pre($form['location_set']);
	if ($form_state['triggering_element']['#type'] == 'checkbox') {
		$toDelete = $form_state['triggering_element']['#return_value'];
		$countries_list = $form_state['input']['location_set']['field_country_code'];
		
		$temp = json_decode($countries_list,true);
		unset($temp[$toDelete]);
		$new = json_encode($temp);
		if (strlen($new) < 3) $new="";
		
		unset($form['location_set']['countries_checkboxes_fieldset']['cbx_countries']);
	  $form['location_set']['countries_checkboxes_fieldset']['cbx_countries'] = array(
	    '#type' => 'checkboxes',
	    '#options' => $temp,
	    '#ajax' => array(
			'callback' => '_fbads_ajax_deletecountry',
			'wrapper' => 'field-country-code-wrapper',
			'parameters'=>array('param1'=>'delete'),
		),
	  );		
		
		//unset($form['location_set']['field_country_code']);
		
		$form['location_set']['field_country_code']['#value'] = $new;
		
	}
	
	return $form['location_set']['field_country_code'];
}